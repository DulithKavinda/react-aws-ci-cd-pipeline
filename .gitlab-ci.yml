stages:
  - build
  - package
  - test
  - deploy_staging
  - test_staging
  - deploy_production

variables:
  APP_VERSION: $CI_PIPELINE_IID

build website:
  image: node:16-alpine
  stage: build
  script:
    - yarn install
    - yarn lint
    - yarn test
    - yarn build
    - echo $APP_VERSION > build/version.html
  artifacts:
    paths:
      - build

build docker image:
  stage: package
  image: docker:20.10.12
  services:
    - docker:20.10.12-dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE -t $CI_REGISTRY_IMAGE:$APP_VERSION .
    - docker push --all-tags $CI_REGISTRY_IMAGE

test docker image:
  stage: test
  image: curlimages/curl
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION
      alias: website
  script:
    - curl http://website/version.html | grep $APP_VERSION

deploy to staging:
  image:
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  stage: deploy_staging
  environment:
    name: staging
    url: http://dulith-2025514-staging.s3-website-us-east-1.amazonaws.com
  script:
    - aws --version
    - aws s3 sync build/ s3://dulith-2025514-staging --delete
    - aws s3 cp build/version.html s3://dulith-2025514-staging/version.html

test staging:
  stage: test_staging
  image: curlimages/curl
  script:
    - curl http://dulith-2025514-staging.s3-website-us-east-1.amazonaws.com/version.html | grep $APP_VERSION

deploy to production:
  image:
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  stage: deploy_production
  environment:
    name: production
    url: http://mywebsite-env.eba-ftsbgqfk.us-east-1.elasticbeanstalk.com/
  when: manual
  only:
    - main
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "\n" | base64)
    - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < templates/auth.json > auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_S3_BUCKET/auth.json
    - aws elasticbeanstalk create-application-version --application-name "My Website" --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
    - aws elasticbeanstalk update-environment --application-name "My Website" --version-label $APP_VERSION --environment-name "Mywebsite-env"
    - aws elasticbeanstalk wait environment-updated --application-name "My Website" --version-label $APP_VERSION --environment-name "Mywebsite-env"
    - curl http://mywebsite-env.eba-ftsbgqfk.us-east-1.elasticbeanstalk.com/version.html | grep $APP_VERSION
